version: '3.8'

services:
  # 前端服务
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      # 生产环境可以挂载SSL证书
      # - ./ssl:/etc/nginx/ssl:ro
      # 挂载nginx配置（可选）
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 后端服务（示例）
  backend:
    image: backend:latest  # 替换为实际的后端镜像
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user:password@db:5432/edudb
    networks:
      - app-network
    depends_on:
      - db
    restart: unless-stopped

  # 数据库服务（示例）
  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=edudb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d edudb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: